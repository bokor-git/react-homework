{"version":3,"sources":["common/input.module.css","common/MyInput.tsx","common/MyButton.tsx","common/MyCheckbox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MyInput","onChange","onEnterPress","value","error","placeholder","className","style","group","color","onKeyPress","e","charCode","currentTarget","type","bar","MyButton","onClick","text","disabled","MyCheckbox","checked","event","App","useState","setValue","setChecked","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,IAAM,qB,+NCU9C,SAASC,EAAT,GAAmF,IAAjEC,EAAgE,EAAhEA,SAASC,EAAuD,EAAvDA,aAAcC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAM1D,OAAO,yBAAKC,UAAWC,IAAMC,OACzB,2BAAQD,MAAOH,EAAM,CAACK,MAAM,OAAO,GAAIN,MAAOA,EAAOO,WANtC,SAACC,GACG,KAAfA,EAAEC,UACFV,EAAcS,EAAEE,cAAcV,QAI2CE,YAAaA,EAAaS,KAAK,OAAOb,SAAW,SAAAU,GAAC,OAAIV,EAASU,EAAEE,cAAcV,UAC5J,0BAAMG,UAAWC,IAAMQ,O,MCVxB,SAASC,EAAT,GAA4D,IAAzCC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SACrC,OAAO,6BACH,4BAAQA,SAAUA,EAAUb,UAAU,gCAAgCW,QAASA,GAAUC,I,MCF1F,SAASE,EAAT,GAA6D,IAAxCF,EAAuC,EAAvCA,KAAMG,EAAiC,EAAjCA,QAASJ,EAAwB,EAAxBA,QACvC,OAAO,yBAAKX,UAAU,iBAClB,2BAAOe,QAASA,EAASpB,SAAU,SAAAqB,GAAK,OAAIL,EAAQK,EAAMT,cAAcQ,UAAUP,KAAK,WAAWR,UAAU,4BAA2B,8BAAOY,ICqBvIK,MAvBf,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACNrB,EADM,KACCsB,EADD,OAEiBD,oBAAkB,GAFnC,mBAENH,EAFM,KAEGK,EAFH,KAUX,OACI,yBAAKpB,UAAU,OAIX,kBAACN,EAAD,CAASI,OAAO,EAAOD,MAAOA,EAAOF,SAX5B,SAACU,GAAD,OAAec,EAASd,IAWwBN,YAAa,OAAQH,aAVjE,SAACS,GAClBgB,MAAMhB,GACNc,EAAS,OAUL,kBAACT,EAAD,CAAUG,UAAU,EAAOD,KAAM,OAAQD,QARlC,kBAAKU,MAAM,WASlB,kBAACP,EAAD,CAAYH,QAfK,SAACI,GAAD,OAAoBK,EAAWL,IAeTA,QAASA,EAASH,KAAM,sBCfvDU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.8f7ac785.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"input_group__3QrRP\",\"bar\":\"input_bar__FZSmD\"};","import React from \"react\";\r\nimport style from \"./input.module.css\"\r\n\r\ntype MyInputType = {\r\n    onChange: (e:string) =>void\r\n    onEnterPress:(e:string)=>void\r\n    error:boolean\r\n    value:string\r\n    placeholder:string\r\n}\r\n\r\nexport function MyInput({onChange,onEnterPress, value, error, placeholder}: MyInputType) {\r\n    const enterEvent = (e: any) => {\r\n        if (e.charCode === 13) {\r\n            onEnterPress((e.currentTarget.value))\r\n        }\r\n    }\r\n    return <div className={style.group}>\r\n        <input  style={error?{color:\"red\"}:{}} value={value} onKeyPress={enterEvent} placeholder={placeholder} type=\"text\" onChange={(e => onChange(e.currentTarget.value))}/>\r\n        <span className={style.bar}></span>\r\n    </div>\r\n\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./button.scss\"\r\n\r\ntype MyButtonType = {\r\n    onClick: () =>void\r\n    text :string\r\n    disabled:boolean\r\n}\r\n\r\nexport function MyButton({onClick, text, disabled}: MyButtonType) {\r\n    return <div>\r\n        <button disabled={disabled} className=\"btn paper paper-raise-flatten\" onClick={onClick}>{text}</button>\r\n    </div>\r\n\r\n\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport \"./checkbox.scss\"\r\n\r\ntype MyButtonType = {\r\n    text:string\r\n    checked:boolean\r\n    onClick: (check:boolean)=>void\r\n}\r\n\r\nexport function MyCheckbox({text, checked, onClick}: MyButtonType) {\r\n    return <div className=\"checkbox-flex\">\r\n        <input checked={checked} onChange={event => onClick(event.currentTarget.checked)} type=\"checkbox\" className=\"checkbox checkbox--blue\"/><span>{text}</span>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {MessageList} from \"./Messenger\";\nimport {TaskList} from \"./TaskList\";\nimport {Input} from \"./Input\";\nimport {MyInput} from \"./common/MyInput\";\nimport {MyButton} from \"./common/MyButton\";\nimport {MyCheckbox} from \"./common/MyCheckbox\";\n\nfunction App() {\n    let [value, setValue] = useState<string>(\"\")\n    let [checked, setChecked] = useState<boolean>(true)\n    const onChangeCheckbox = (checked:boolean)=> setChecked(checked)\n    const onChange = (e: string) => setValue(e)\n    const onEnterPress = (e: string) => {\n        alert(e)\n        setValue(\"\")\n    }\n    const onClick =()=> alert(\"done\")\n    return (\n        <div className=\"App\">\n            {/*<MessageList/>*/}\n            {/*<TaskList/>*/}\n            {/*<Input/>*/}\n            <MyInput error={false} value={value} onChange={onChange} placeholder={\"Name\"} onEnterPress={onEnterPress}/>\n            {/*<div>{value?.toUpperCase().split(\"\").reverse()}</div>*/}\n            <MyButton disabled={false} text={\"Send\"} onClick={onClick}/>\n            <MyCheckbox onClick={onChangeCheckbox} checked={checked} text={\"Custom checkbox\"}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}